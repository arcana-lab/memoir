GIT_ROOT=

BUILD_DIR=build

CC=clang++
LL=llvm-link
NORM=memoir-norm
OPT=memoir-load

LIBS=-lm -lstdc++
CFLAGS=-I$(GIT_ROOT)/install/include -I$(GIT_ROOT)/install/include/api -std=c++17 -O3 -fno-vectorize -fno-slp-vectorize -Xclang -disable-llvm-passes -fdeclspec $(LIBS)

IR_FILE_RUNTIME=$(GIT_ROOT)/install/lib/memoir.bc
IR_FILE_DECL=$(GIT_ROOT)/install/lib/memoir.decl.bc
IR_FILE_BACKENDS=$(wildcard $(GIT_ROOT)/install/lib/backend/*.bc)

IR_FILE=$(BUILD_DIR)/program.bc
IR_FILE_PROGRAM=$(BUILD_DIR)/linked.bc
IR_FILE_INPUT=$(BUILD_DIR)/input.bc
IR_FILE_NORM=$(BUILD_DIR)/normalized.bc
IR_FILE_SSA=$(BUILD_DIR)/ssa.bc
IR_FILE_OPT=$(BUILD_DIR)/optimized.bc
IR_FILE_LOWER_NORM=$(BUILD_DIR)/lowering.norm.bc
IR_FILE_LOWERED=$(BUILD_DIR)/lowered.bc

OBJ_FILE=$(patsubst %.bc,%.o,$(IR_FILE))
BINARY=$(BUILD_DIR)/$(notdir $(realpath .))

CFILES := $(wildcard *.c)
CPPFILES := $(wildcard *.cpp)
C_BITCODES := $(patsubst %.c,$(BUILD_DIR)/%.bc,$(CFILES))
CPP_BITCODES :=  $(patsubst %.cpp,$(BUILD_DIR)/%.bc,$(CPPFILES))

all: setup optimize lower compile test

noopt: setup lower compile test

setup: $(BUILD_DIR)

compile: $(BUILD_DIR) $(BINARY)

test: compile
	$(BINARY) 2>&1 | tee $(BUILD_DIR)/test.out

optimize: $(IR_FILE_OPT) $(IR_FILE_BACKENDS)
	$(LL) $^ -o $(IR_FILE)

baseline: $(IR_FILE_SSA) $(IR_FILE_BACKENDS)
	$(LL) $^ -o $(IR_FILE)

lower: $(IR_FILE_LOWERED) $(IR_FILE_RUNTIME)
	$(LL) $^ -o $(IR_FILE)

$(BUILD_DIR):
	mkdir -p $(BUILD_DIR)

$(C_BITCODES): $(BUILD_DIR)/%.bc : %.c
	$(CC) $(CFLAGS) -emit-llvm -c $< -o $@

$(CPP_BITCODES): $(BUILD_DIR)/%.bc : %.cpp
	$(CC) $(CFLAGS) -emit-llvm -c $< -o $@

$(IR_FILE_INPUT): $(C_BITCODES) $(CPP_BITCODES)
	$(LL) $^ -o $@

$(IR_FILE_RUNTIME):
	make -C $(GIT_ROOT)

$(IR_FILE_NORM): $(IR_FILE_INPUT)
	$(NORM) $< $@
	$(LL) $@ $(IR_FILE_DECL) -o $@

$(IR_FILE_SSA): $(IR_FILE_NORM)
	$(OPT) --memoir-verbose=quick --memoir-stats --mut2immut --memoir-stats $< -o $@

$(IR_FILE_OPT): $(IR_FILE_SSA)
	cp $< $@

$(IR_FILE_LOWERED): $(IR_FILE)
	$(OPT) --memoir-verbose=quick --memoir-stats --ssa-destruction --memoir-stats $< -o $@

$(OBJ_FILE): $(IR_FILE)
	llc -filetype=obj $< -o $@

$(BINARY): $(OBJ_FILE)
	$(CC) $< -o $@

.PHONY: all noopt setup compile test optimize baseline clean

clean:
	rm -rf $(BUILD_DIR)
