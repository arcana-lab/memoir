GIT_ROOT=

BUILD_DIR=build

CC=clang++
NOELLE_NORM=noelle-norm
LL=llvm-link
OPT=$(GIT_ROOT)/compiler/scripts/optimize.sh

LIBS=-lm -lstdc++
CFLAGS=-I$(GIT_ROOT)/install/include -std=c++17 -O3 -fno-vectorize -fno-slp-vectorize -Xclang -disable-llvm-passes -fdeclspec $(LIBS)

IR_FILE=$(BUILD_DIR)/program.bc
IR_FILE_PROGRAM=$(BUILD_DIR)/linked.bc
IR_FILE_RUNTIME=$(GIT_ROOT)/install/lib/memoir.bc
IR_FILE_INPUT=$(BUILD_DIR)/input.bc
IR_FILE_OPT=$(BUILD_DIR)/optimized.bc

OBJ_FILE=$(patsubst %.bc,%.o,$(IR_FILE))
BINARY=$(BUILD_DIR)/$(notdir $(realpath .))

CFILES := $(wildcard *.c)
CPPFILES := $(wildcard *.cpp)
C_BITCODES := $(patsubst %.c,$(BUILD_DIR)/%.bc,$(CFILES))
CPP_BITCODES :=  $(patsubst %.cpp,$(BUILD_DIR)/%.bc,$(CPPFILES))

all: setup optimize compile test

noopt: setup compile test

setup: $(BUILD_DIR)

compile: $(BUILD_DIR) $(BINARY)

test: compile
	$(BINARY) &> out.txt

optimize: $(IR_FILE_OPT)
	cp $< $(IR_FILE)

baseline: $(IR_FILE_INPUT)
	cp $< $(IR_FILE)

$(BUILD_DIR):
	mkdir -p $(BUILD_DIR)

$(C_BITCODES): $(BUILD_DIR)/%.bc : %.c
	$(CC) $(CFLAGS) -emit-llvm -c $< -o $@

$(CPP_BITCODES): $(BUILD_DIR)/%.bc : %.cpp
	$(CC) $(CFLAGS) -emit-llvm -c $< -o $@

$(IR_FILE_PROGRAM): $(C_BITCODES) $(CPP_BITCODES)
	$(LL) $^ -o $@

$(IR_FILE_RUNTIME):
	make -C $(GIT_ROOT)

$(IR_FILE_INPUT): $(IR_FILE_PROGRAM) $(IR_FILE_RUNTIME)
	$(LL) $^ -o $@

$(IR_FILE_OPT): $(IR_FILE_INPUT)
	$(OPT) $< $@

$(OBJ_FILE): $(IR_FILE)
	llc -filetype=obj $< -o $@

$(BINARY): $(OBJ_FILE)
	$(CC) $< -o $@

.PHONY: all noopt setup compile test optimize baseline clean

clean:
	rm -rf $(BUILD_DIR)
