#!/bin/bash -e

function usage {
    echo "This script will run MemOIR optimizations.";
    echo "  USAGE: `basename $0` <INPUT FILE> -o <OUTPUT FILE> [<OPTIONS, ...>]"
}

function flags {
    echo "  FLAGS:" 
    echo "    -o,--output" 
    echo "      Specifies the output file" 
    echo "    -n,--norm,--normalize" 
    echo "      Enables the normalization pass" 
    echo "    -l,--lower" 
    echo "      Enables the object lowering pass" 
}

if [[ $# -lt 1 ]]; then
    usage
    exit 1
fi

PASSES=()

while [[ $# -gt 0 ]] ;
do
    case $1 in
        -o|--output)
            OUTPUT_IR_FILE=$2
            shift
            shift
            ;;
        -n|--norm|--normalize)
            NORMALIZE="true"
            shift
            ;;
        -l|--lower)
            LOWER="true"
            shift
            ;;
        -h|--help)
            usage
            echo ""
            flags
            exit 1
            ;;
        -*|--*)
            PASSES+=("$1")
            shift
            ;;
        *)
            if [ -n "${INPUT_IR_FILE}" ] ; then
                echo "Too many positional arguments passed!"
                usage
                exit 1
            fi
            INPUT_IR_FILE=$1
            shift
            ;;
    esac
done

if [ -z ${INPUT_IR_FILE} ] ; then
    echo "No input IR file specified."
    usage
    exit 1
fi

if [ -z ${OUTPUT_IR_FILE} ] ; then
    echo "No output IR file specified."
    usage
    exit 1
fi

SOURCE=${BASH_SOURCE[0]}
while [ -L "${SOURCE}" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR=$( cd -P "$( dirname "${SOURCE}" )" >/dev/null 2>&1 && pwd )
  SOURCE=$(readlink "${SOURCE}")
  # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  [[ ${SOURCE} != /* ]] && SOURCE=$DIR/$SOURCE 
done
MEMOIR_HOME=$( cd -P "$( dirname "${SOURCE}" )" >/dev/null 2>&1 && pwd )/..

LIB_DIR=${MEMOIR_HOME}/lib

source ${MEMOIR_HOME}/bin/memoir-env

echo "Running MemOIR compiler (I: ${INPUT_IR_FILE}, O: ${OUTPUT_IR_FILE})"

OUT_DIR=$(dirname ${OUTPUT_IR_FILE})
IR_FILE_BASENAME=$(basename -- ${OUTPUT_IR_FILE})
IR_FILE_FILENAME="${IR_FILE_BASENAME%.bc}"
IR_FILE=${OUT_DIR}/${IR_FILE_FILENAME}.temp.bc

cp ${INPUT_IR_FILE} ${IR_FILE} ;

#Normalize the bitcode
if [[ "${NORMALIZE}" == "true" ]] ; then
    NORM_IR_FILE=${OUT_DIR}/${IR_FILE_FILENAME}.norm.bc

    echo "Normalizing the bitcode (I: ${IR_FILE}, O: ${NORM_IR_FILE})"
    
    ${MEMOIR_HOME}/bin/memoir-norm ${IR_FILE} ${IR_FILE}
    cp ${IR_FILE} ${NORM_IR_FILE}

    echo "Done normalizing"
fi

memoir-load ${PASSES[@]} ${IR_FILE} -o ${IR_FILE}

# Lower the bitcode
if [[ "${LOWER}" == "true" ]] ; then
    LOWERED_IR_FILE=${OUT_DIR}/${IR_FILE_FILENAME}.lowered.bc

    echo "Lowering the bitcode (I: ${IR_FILE}, O: ${LOWERED_IR_FILE})"
    ${MEMOIR_HOME}/bin/memoir-lower ${IR_FILE} ${IR_FILE} ;

    cp ${IR_FILE} ${LOWERED_IR_FILE}

    echo "Done lowering"
fi

cp ${IR_FILE} ${OUTPUT_IR_FILE}
