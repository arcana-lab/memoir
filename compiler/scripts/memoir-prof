#!/bin/bash -e
if [ $# -lt 1 ] ; then
    echo "This script will profile the bitcode for usage in MemOIR and NOELLE passes." ;
    echo "  USAGE: `basename $0` <INPUT IR FILE> <OUTPUT IR FILE> [<LIBS, ...>]" ;
fi

SOURCE=${BASH_SOURCE[0]}
while [ -L "${SOURCE}" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR=$( cd -P "$( dirname "${SOURCE}" )" >/dev/null 2>&1 && pwd )
  SOURCE=$(readlink "${SOURCE}")
  # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  [[ ${SOURCE} != /* ]] && SOURCE=$DIR/$SOURCE 
done
GIT_ROOT=$( cd -P "$( dirname "${SOURCE}" )" >/dev/null 2>&1 && pwd )/../..

LIB_DIR=${GIT_ROOT}/install/lib ;

source ${GIT_ROOT}/enable ;

IR_FILE_IN="$1" ;
shift ;
IR_FILE_OUT="$1" ;
shift ;
LIBS="$@"

IR_FILE_BASENAME=$(basename -- ${IR_FILE_IN}) ;
IR_FILE_FILENAME="${IR_FILE_BASENAME%.bc}" ;

OUT_DIR=$(dirname ${IR_FILE_IN}) ;

echo "" ;
echo "Profile bitcode (I: ${IR_FILE_IN}, O: ${IR_FILE_OUT})" ;

TEMP_DIR=$(mktemp -d) ;
IR_FILE=${TEMP_DIR}/temp.bc 
cp ${IR_FILE_IN} ${IR_FILE} ;

PROF_FILE="${OUT_DIR}/toProfileBinary" ;
noelle-prof-coverage ${IR_FILE} ${PROF_FILE} -lm -lstdc++ -L${LIB_DIR} -lMemOIR ${LIBS} ;
./${PROF_FILE} ;
mv default.profraw ${OUT_DIR}/default.profraw
noelle-meta-prof-embed ${OUT_DIR}/default.profraw ${IR_FILE} -o ${IR_FILE};

cp ${IR_FILE} ${IR_FILE_OUT} ;

rm -r ${TEMP_DIR} ;

echo "" ;
