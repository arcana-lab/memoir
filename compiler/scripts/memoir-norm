#!/bin/bash -e

function usage {
    echo "This script will normalize an LLVM program to be a MEMOIR program.";
    echo "  USAGE: `basename $0` <INPUT FILE> -o <OUTPUT FILE> [<OPTIONS, ...>]"
}

function flags {
    echo "  FLAGS:"
    echo "    -h,--help              Display this help message."
    echo "    -o,--output <filename> Specifies the output file."
    echo "    --stats                Print statistics about the MEMOIR program."
}

if [[ $# -lt 1 ]]; then
    usage
    exit 1
fi

PREPASSES=()
POSTPASSES=()

while [[ $# -gt 0 ]] ;
do
    case $1 in
        -o|--output)
            OUTPUT_IR_FILE=$2
            shift
            shift
            ;;
        -h|--help)
            usage
            echo ""
            flags
            exit 1
            ;;
        --infer-types)
            INFER_TYPES="y"
            shift
            ;;
        --stats)
            PREPASSES+=("-passes=memoir-stats")
            POSTPASSES+=("-passes=memoir-stats")
            shift
            ;;
        --memoir-enable-use-phi)
            POSTPASSES+=("$1")
            shift
            ;;
        *)
            if [ -n "${INPUT_IR_FILE}" ] ; then
                echo "Too many positional arguments passed!"
                usage
                exit 1
            fi
            INPUT_IR_FILE=$1
            shift
            ;;
    esac
done

if [ -z ${INPUT_IR_FILE} ]
then
    echo "No input IR file specified."
    usage
    exit 1
fi

if [ -z ${OUTPUT_IR_FILE} ]
then
    echo "No output IR file specified."
    usage
    exit 1
fi

IR_FILE=$(mktemp --suffix=.bc)
cp ${INPUT_IR_FILE} ${IR_FILE}

# Run some generally helpful LLVM transformations.
# opt -passes=always-inline,break-crit-edges,argpromotion,simplifycfg,mergereturn,loop-simplify,indvars,sroa,mem2reg,sroa ${IR_FILE} -o ${IR_FILE}
opt -passes='mem2reg,function(lowerswitch),mergereturn,break-crit-edges,loop-simplify,lcssa,indvars' ${IR_FILE} -o ${IR_FILE}

# Run NOELLE norm so that it is happy.
# noelle-norm ${IR_FILE} -o ${IR_FILE}

# ${MEMOIR_HOME}/bin/memoir-prof ${IR_FILE} ${IR_FILE_PROF} ;

# Link in the IR declarations.
llvm-link ${IR_FILE} $(memoir-config --libdir)/memoir.decl.bc -o ${IR_FILE}

# Run type inference if requested.
if [ ! -z ${INFER_TYPES} ]
then
    memoir-load -passes=memoir-type-infer ${IR_FILE} -o ${IR_FILE}
fi

# Run SSA construction and type inference.
memoir-load ${PREPASSES[@]} -passes=memoir-ssa-construction ${POSTPASSES[@]} ${IR_FILE} -o ${IR_FILE}

mv ${IR_FILE} ${OUTPUT_IR_FILE}
