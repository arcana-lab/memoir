#!/bin/bash -e

if [ $# -lt 1 ] ; then
    echo "This script will normalize the bitcode for usage in MemOIR and NOELLE passes." ;
    echo "  USAGE: `basename $0` <INPUT IR FILE> <OUTPUT IR FILE> [<OPTIONS, ...>]" ;
fi

SOURCE=${BASH_SOURCE[0]}
while [ -L "${SOURCE}" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR=$( cd -P "$( dirname "${SOURCE}" )" >/dev/null 2>&1 && pwd )
  SOURCE=$(readlink "${SOURCE}")
  # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  [[ ${SOURCE} != /* ]] && SOURCE=$DIR/$SOURCE 
done
MEMOIR_HOME=$( cd -P "$( dirname "${SOURCE}" )" >/dev/null 2>&1 && pwd )/../..

LIB_DIR=${MEMOIR_HOME}/install/lib ;

source ${MEMOIR_HOME}/enable ;

IR_FILE_IN="$1" ;
IR_FILE_OUT="$2" ;

echo "" ;
echo "Normalization pipeline (I: ${IR_FILE_IN}, O: ${IR_FILE_OUT})" ;

IR_FILE_BASENAME=$(basename -- ${IR_FILE_OUT}) ;
IR_FILE_FILENAME="${IR_FILE_BASENAME%.bc}" ;

OUT_DIR=$(dirname ${IR_FILE_OUT}) ;

IR_FILE=${OUT_DIR}/temp.bc
cp ${IR_FILE_IN} ${IR_FILE} ;

IR_FILE_MEM2REG=${OUT_DIR}/${IR_FILE_FILENAME}_mem2reg.bc ;
opt -mem2reg ${IR_FILE} -o ${IR_FILE} ;
# cp ${IR_FILE_MEM2REG} ${IR_FILE} ;

IR_FILE_NOELLE_NORM=${OUT_DIR}/${IR_FILE_FILENAME}_noelle_norm.bc ;
echo "Normalize Bitcode (I: ${IR_FILE}, O: ${IR_FILE_NOELLE_NORM})" ;
noelle-norm ${IR_FILE} -o ${IR_FILE};
# cp ${IR_FILE} ${IR_FILE_NOELLE_NORM} ;

IR_FILE_PROF=${OUT_DIR}/${IR_FILE_FILENAME}_prof.bc ;
# ${MEMOIR_HOME}/bin/memoir-prof ${IR_FILE} ${IR_FILE_PROF} ;

IR_FILE_NORM=${OUT_DIR}/${IR_FILE_FILENAME}_norm.bc ;
# cp ${IR_FILE} ${IR_FILE_NORM} ;

mv ${IR_FILE} ${IR_FILE_OUT} ;

echo "" ;
