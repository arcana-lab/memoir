#!/bin/bash -e

if [ $# -lt 1 ] ; then
    echo "This script will normalize the MemOIR bitcode to generate the declaration file."
    echo "  USAGE: `basename $0` <INPUT_IR_FILE> <OUTPUT_IR_FILE> [<OPTIONS, ...>]"
fi

SOURCE=${BASH_SOURCE[0]}
while [ -L "${SOURCE}" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR=$( cd -P "$( dirname "${SOURCE}" )" >/dev/null 2>&1 && pwd )
  SOURCE=$(readlink "${SOURCE}")
  # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  [[ ${SOURCE} != /* ]] && SOURCE=$DIR/$SOURCE 
done
MEMOIR_HOME=$( cd -P "$( dirname "${SOURCE}" )" >/dev/null 2>&1 && pwd )/..

source ${MEMOIR_HOME}/bin/memoir-enable

IN_IR_FILE="$1"
OUT_IR_FILE="$2"

TMP_IR_FILE="norm.temp.bc"

cp ${IN_IR_FILE} ${TMP_IR_FILE}

echo "Normalize Runtime (I: ${IN_IR_FILE}, O: ${OUT_IR_FILE})"

CMD="llvm-extract -glob llvm.used -rfunc memoir__* ${TMP_IR_FILE} -o ${TMP_IR_FILE}"
echo "$CMD"
eval $CMD

CMD="${MEMOIR_HOME}/bin/memoir-load -memoir-norm -only-runtime ${TMP_IR_FILE} -o ${OUT_IR_FILE}"
echo "$CMD"
eval $CMD

rm ${TMP_IR_FILE} ;
