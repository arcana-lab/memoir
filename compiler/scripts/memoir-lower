#!/bin/bash -e

function usage {
    echo "This script will run MemOIR optimizations.";
    echo "  USAGE: `basename $0` <INPUT FILE> -o <OUTPUT FILE> [<OPTIONS, ...>]"
}

function flags {
    echo "  FLAGS:" 
    echo "    -o,--output <FILENAME>" 
    echo "      Specifies the output file" 
}

if [[ $# -lt 1 ]]; then
    usage
    exit 1
fi

PASSES=()

while [[ $# -gt 0 ]] ;
do
    case $1 in
        -o|--output)
            OUTPUT_IR_FILE=$2
            shift
            shift
            ;;
        -h|--help)
            usage
            echo ""
            flags
            exit 1
            ;;
        *)
            if [ -n "${INPUT_IR_FILE}" ] ; then
                echo "Too many positional arguments passed!"
                usage
                exit 1
            fi
            INPUT_IR_FILE=$1
            shift
            ;;
    esac
done

if [ -z ${INPUT_IR_FILE} ] ; then
    echo "No input IR file specified."
    usage
    exit 1
fi

if [ -z ${OUTPUT_IR_FILE} ] ; then
    echo "No output IR file specified."
    usage
    exit 1
fi

# Run the ImplLinker.
TEMP_FILE=$(mktemp --suffix=".cpp")
memoir-load ${INPUT_IR_FILE} --memoir-impl-linker --impl-out-file ${TEMP_FILE} -o /dev/null

# Compile the collection implementations to bitcode.
TEMP_BC=$(mktemp --suffix=".bc")
clang++ ${TEMP_FILE} -c -emit-llvm -I$(memoir-config --includedir) -o ${TEMP_BC}
rm ${TEMP_FILE}

# Link the bitcode.
llvm-link ${INPUT_IR_FILE} ${TEMP_BC} -o ${OUTPUT_IR_FILE}

# Peform SSA destruction.
memoir-load --ssa-destruction ${OUTPUT_IR_FILE} -o ${OUTPUT_IR_FILE}

# Cleanup.
rm ${TEMP_BC}
