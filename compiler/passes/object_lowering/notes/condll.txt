; ModuleID = 'cond.bc'
source_filename = "main.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"struct.objectir::Type" = type <{ i32 (...)**, i32, [4 x i8] }>
%"struct.objectir::Object" = type { %"struct.objectir::Type"*, %"class.std::vector" }
%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<objectir::Field *, std::allocator<objectir::Field *> >::_Vector_impl" }
%"struct.std::_Vector_base<objectir::Field *, std::allocator<objectir::Field *> >::_Vector_impl" = type { %"struct.objectir::Field"**, %"struct.objectir::Field"**, %"struct.objectir::Field"** }
%"struct.objectir::Field" = type { i32 (...)**, %"struct.objectir::Type"* }

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@objTy = dso_local global %"struct.objectir::Type"* null, align 8
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_main.cpp, i8* null }]

; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}

declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nounwind
declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) #3

; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init.1() #0 section ".text.startup" {
  %1 = call %"struct.objectir::Type"* @getUInt64Type()
  %2 = call %"struct.objectir::Type"* (i32, ...) @getObjectType(i32 1, %"struct.objectir::Type"* %1)
  store %"struct.objectir::Type"* %2, %"struct.objectir::Type"** @objTy, align 8
  ret void
}

declare dso_local %"struct.objectir::Type"* @getObjectType(i32, ...) #1

declare dso_local %"struct.objectir::Type"* @getUInt64Type() #1

; Function Attrs: noinline norecurse optnone uwtable
define dso_local i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca %"struct.objectir::Object"*, align 8
  %3 = alloca %"struct.objectir::Object"*, align 8
  %4 = alloca %"struct.objectir::Object"*, align 8
  %5 = alloca %"struct.objectir::Field"*, align 8
  %6 = alloca %"struct.objectir::Field"*, align 8
  %7 = alloca i64, align 8
  store i32 0, i32* %1, align 4
  %8 = load %"struct.objectir::Type"*, %"struct.objectir::Type"** @objTy, align 8
  %9 = call %"struct.objectir::Object"* @buildObject(%"struct.objectir::Type"* %8)
  store %"struct.objectir::Object"* %9, %"struct.objectir::Object"** %3, align 8
  
  %10 = load %"struct.objectir::Type"*, %"struct.objectir::Type"** @objTy, align 8
  %11 = call %"struct.objectir::Object"* @buildObject(%"struct.objectir::Type"* %10)
  store %"struct.objectir::Object"* %11, %"struct.objectir::Object"** %4, align 8
  
  %12 = load %"struct.objectir::Object"*, %"struct.objectir::Object"** %3, align 8
  %13 = call %"struct.objectir::Field"* @getObjectField(%"struct.objectir::Object"* %12, i64 0)
  store %"struct.objectir::Field"* %13, %"struct.objectir::Field"** %5, align 8
  
  %14 = load %"struct.objectir::Object"*, %"struct.objectir::Object"** %3, align 8
  %15 = call %"struct.objectir::Field"* @getObjectField(%"struct.objectir::Object"* %14, i64 0)
  store %"struct.objectir::Field"* %15, %"struct.objectir::Field"** %6, align 8
  
  %16 = load %"struct.objectir::Field"*, %"struct.objectir::Field"** %5, align 8
  call void @writeUInt64(%"struct.objectir::Field"* %16, i64 42)
  
  %17 = load %"struct.objectir::Field"*, %"struct.objectir::Field"** %6, align 8
  call void @writeUInt64(%"struct.objectir::Field"* %17, i64 73)
  
  %18 = load %"struct.objectir::Field"*, %"struct.objectir::Field"** %5, align 8
  %19 = call i64 @readUInt64(%"struct.objectir::Field"* %18)
  
  %20 = load %"struct.objectir::Field"*, %"struct.objectir::Field"** %6, align 8
  %21 = call i64 @readUInt64(%"struct.objectir::Field"* %20)
  
  %22 = icmp eq i64 %19, %21
  br i1 %22, label %23, label %25

23:                                               ; preds = %0
  %24 = load %"struct.objectir::Object"*, %"struct.objectir::Object"** %3, align 8
  store %"struct.objectir::Object"* %24, %"struct.objectir::Object"** %2, align 8
  br label %27

25:                                               ; preds = %0
  %26 = load %"struct.objectir::Object"*, %"struct.objectir::Object"** %4, align 8
  store %"struct.objectir::Object"* %26, %"struct.objectir::Object"** %2, align 8
  br label %27

27:                                               ; preds = %25, %23
  %28 = load %"struct.objectir::Object"*, %"struct.objectir::Object"** %2, align 8
  %29 = call %"struct.objectir::Field"* @getObjectField(%"struct.objectir::Object"* %28, i64 0)
  %30 = call i64 @readUInt64(%"struct.objectir::Field"* %29)
  store i64 %30, i64* %7, align 8
  ret i32 0
}

declare dso_local %"struct.objectir::Object"* @buildObject(%"struct.objectir::Type"*) #1

declare dso_local %"struct.objectir::Field"* @getObjectField(%"struct.objectir::Object"*, i64) #1

declare dso_local void @writeUInt64(%"struct.objectir::Field"*, i64) #1

declare dso_local i64 @readUInt64(%"struct.objectir::Field"*) #1

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_main.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  call void @__cxx_global_var_init.1()
  ret void
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { noinline norecurse optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 9.0.0 (git@github.com:scampanoni/LLVM_installer.git 713d2f6594d9a0b77e7f9a120aaa7c917715a640)"}
