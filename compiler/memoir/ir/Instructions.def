// clang-format off
#ifndef HANDLE_INST
#define HANDLE_INST(ENUM, FUNC, CLASS) /* NO HANDLING */
#endif
#define HANDLE_INST_(ENUM, FUNC, CLASS) HANDLE_INST(ENUM, FUNC, CLASS)



#ifndef HANDLE_TYPE_INST
#define HANDLE_TYPE_INST(ENUM, FUNC, CLASS) HANDLE_INST(ENUM, FUNC, CLASS)
#endif
#define HANDLE_TYPE_INST_(ENUM, FUNC, CLASS) HANDLE_TYPE_INST(ENUM, FUNC, CLASS)
/* HANDLE_TYPE_INST_(DEFINE_TYPE, MEMOIR_FUNC(define_type), DefineTypeInst) */
/* HANDLE_TYPE_INST_(LOOKUP_TYPE, MEMOIR_FUNC(lookup_type), LookupTypeInst)  */
HANDLE_TYPE_INST_(TUPLE_TYPE, MEMOIR_FUNC(tuple_type), TupleTypeInst)
HANDLE_TYPE_INST_(ARRAY_TYPE, MEMOIR_FUNC(array_type), ArrayTypeInst)
HANDLE_TYPE_INST_(ASSOC_ARRAY_TYPE, MEMOIR_FUNC(assoc_type), AssocArrayTypeInst)
HANDLE_TYPE_INST_(SEQUENCE_TYPE, MEMOIR_FUNC(sequence_type), SequenceTypeInst)
HANDLE_TYPE_INST_(REFERENCE_TYPE, MEMOIR_FUNC(ref_type), ReferenceTypeInst)



// Primitive type handling
#ifndef HANDLE_PRIMITIVE_TYPE_INST
#define HANDLE_PRIMITIVE_TYPE_INST(ENUM, FUNC, CLASS) HANDLE_TYPE_INST(ENUM, FUNC, CLASS)
#endif
#define HANDLE_PRIMITIVE_TYPE_INST_(ENUM, FUNC, CLASS) HANDLE_PRIMITIVE_TYPE_INST(ENUM, FUNC, CLASS)
HANDLE_PRIMITIVE_TYPE_INST_(UINT64_TYPE, MEMOIR_FUNC(u64_type), UInt64TypeInst)
HANDLE_PRIMITIVE_TYPE_INST_(UINT32_TYPE, MEMOIR_FUNC(u32_type), UInt32TypeInst)
HANDLE_PRIMITIVE_TYPE_INST_(UINT16_TYPE, MEMOIR_FUNC(u16_type), UInt16TypeInst)
HANDLE_PRIMITIVE_TYPE_INST_(UINT8_TYPE, MEMOIR_FUNC(u8_type), UInt8TypeInst)
HANDLE_PRIMITIVE_TYPE_INST_(UINT2_TYPE, MEMOIR_FUNC(u2_type), UInt2TypeInst)
HANDLE_PRIMITIVE_TYPE_INST_(INT64_TYPE, MEMOIR_FUNC(i64_type), Int64TypeInst)
HANDLE_PRIMITIVE_TYPE_INST_(INT32_TYPE, MEMOIR_FUNC(i32_type), Int32TypeInst)
HANDLE_PRIMITIVE_TYPE_INST_(INT16_TYPE, MEMOIR_FUNC(i16_type), Int16TypeInst)
HANDLE_PRIMITIVE_TYPE_INST_(INT8_TYPE, MEMOIR_FUNC(i8_type), Int8TypeInst)
HANDLE_PRIMITIVE_TYPE_INST_(INT2_TYPE, MEMOIR_FUNC(i2_type), Int2TypeInst)
HANDLE_PRIMITIVE_TYPE_INST_(BOOL_TYPE, MEMOIR_FUNC(boolean_type), BoolTypeInst)
HANDLE_PRIMITIVE_TYPE_INST_(FLOAT_TYPE, MEMOIR_FUNC(f32_type), FloatTypeInst)
HANDLE_PRIMITIVE_TYPE_INST_(DOUBLE_TYPE, MEMOIR_FUNC(f64_type), DoubleTypeInst)
HANDLE_PRIMITIVE_TYPE_INST_(POINTER_TYPE, MEMOIR_FUNC(ptr_type), PointerTypeInst)
HANDLE_PRIMITIVE_TYPE_INST_(VOID_TYPE, MEMOIR_FUNC(void_type), VoidTypeInst)



#ifndef HANDLE_ALLOC_INST
#define HANDLE_ALLOC_INST(ENUM, FUNC, CLASS) HANDLE_INST(ENUM, FUNC, CLASS)
#endif
#define HANDLE_ALLOC_INST_(ENUM, FUNC, CLASS) HANDLE_ALLOC_INST(ENUM, FUNC, CLASS)
HANDLE_ALLOC_INST_(ALLOCATE, MEMOIR_FUNC(allocate), AllocInst)



#ifndef HANDLE_ACCESS_INST
#define HANDLE_ACCESS_INST(ENUM, FUNC, CLASS) HANDLE_INST(ENUM, FUNC, CLASS)
#endif
#define HANDLE_ACCESS_INST_(ENUM, FUNC, CLASS) HANDLE_ACCESS_INST(ENUM, FUNC, CLASS)


#ifndef HANDLE_READ_INST
#define HANDLE_READ_INST(ENUM, FUNC, CLASS) HANDLE_ACCESS_INST(ENUM, FUNC, CLASS)
#endif
#define HANDLE_READ_INST_(ENUM, FUNC, CLASS) HANDLE_READ_INST(ENUM, FUNC, CLASS)
HANDLE_READ_INST_(READ_UINT64, MEMOIR_FUNC(read_u64), ReadInst)
HANDLE_READ_INST_(READ_UINT32, MEMOIR_FUNC(read_u32), ReadInst)
HANDLE_READ_INST_(READ_UINT16, MEMOIR_FUNC(read_u16), ReadInst)
HANDLE_READ_INST_(READ_UINT8, MEMOIR_FUNC(read_u8), ReadInst)
HANDLE_READ_INST_(READ_UINT2, MEMOIR_FUNC(read_u2), ReadInst)
HANDLE_READ_INST_(READ_INT64, MEMOIR_FUNC(read_i64), ReadInst)
HANDLE_READ_INST_(READ_INT32, MEMOIR_FUNC(read_i32), ReadInst)
HANDLE_READ_INST_(READ_INT16, MEMOIR_FUNC(read_i16), ReadInst)
HANDLE_READ_INST_(READ_INT8, MEMOIR_FUNC(read_i8), ReadInst)
HANDLE_READ_INST_(READ_INT2, MEMOIR_FUNC(read_i2), ReadInst)
HANDLE_READ_INST_(READ_BOOL, MEMOIR_FUNC(read_boolean), ReadInst)
HANDLE_READ_INST_(READ_DOUBLE, MEMOIR_FUNC(read_f64), ReadInst)
HANDLE_READ_INST_(READ_FLOAT, MEMOIR_FUNC(read_f32), ReadInst)
HANDLE_READ_INST_(READ_PTR, MEMOIR_FUNC(read_ptr), ReadInst)
HANDLE_READ_INST_(READ_REF, MEMOIR_FUNC(read_ref), ReadInst)

HANDLE_ACCESS_INST_(GET, MEMOIR_FUNC(get), GetInst)
HANDLE_ACCESS_INST_(SIZE, MEMOIR_FUNC(size), SizeInst)

/* Collection operations */
HANDLE_INST_(DELETE, MEMOIR_FUNC(delete), DeleteInst)
HANDLE_INST_(END, MEMOIR_FUNC(end), EndInst)

/* Update operations */
#ifndef HANDLE_UPDATE_INST
#define HANDLE_UPDATE_INST(ENUM, FUNC, CLASS) HANDLE_ACCESS_INST(ENUM, FUNC, CLASS)
#endif
#define HANDLE_UPDATE_INST_(ENUM, FUNC, CLASS) HANDLE_UPDATE_INST(ENUM, FUNC, CLASS)

HANDLE_UPDATE_INST_(INSERT, MEMOIR_FUNC(insert), InsertInst)
HANDLE_UPDATE_INST_(REMOVE, MEMOIR_FUNC(remove), RemoveInst)
HANDLE_UPDATE_INST_(CLEAR, MEMOIR_FUNC(clear), ClearInst)

/* Write operations */
#ifndef HANDLE_WRITE_INST
#define HANDLE_WRITE_INST(ENUM, FUNC, CLASS) HANDLE_UPDATE_INST(ENUM, FUNC, CLASS)
#endif
#define HANDLE_WRITE_INST_(ENUM, FUNC, CLASS) HANDLE_WRITE_INST(ENUM, FUNC, CLASS)
HANDLE_WRITE_INST_(WRITE_UINT64, MEMOIR_FUNC(write_u64), WriteInst)
HANDLE_WRITE_INST_(WRITE_UINT32, MEMOIR_FUNC(write_u32), WriteInst)
HANDLE_WRITE_INST_(WRITE_UINT16, MEMOIR_FUNC(write_u16), WriteInst)
HANDLE_WRITE_INST_(WRITE_UINT8, MEMOIR_FUNC(write_u8), WriteInst)
HANDLE_WRITE_INST_(WRITE_UINT2, MEMOIR_FUNC(write_u2), WriteInst)
HANDLE_WRITE_INST_(WRITE_INT64, MEMOIR_FUNC(write_i64), WriteInst)
HANDLE_WRITE_INST_(WRITE_INT32, MEMOIR_FUNC(write_i32), WriteInst)
HANDLE_WRITE_INST_(WRITE_INT16, MEMOIR_FUNC(write_i16), WriteInst)
HANDLE_WRITE_INST_(WRITE_INT8, MEMOIR_FUNC(write_i8), WriteInst)
HANDLE_WRITE_INST_(WRITE_INT2, MEMOIR_FUNC(write_i2), WriteInst)
HANDLE_WRITE_INST_(WRITE_BOOL, MEMOIR_FUNC(write_boolean), WriteInst)
HANDLE_WRITE_INST_(WRITE_DOUBLE, MEMOIR_FUNC(write_f64), WriteInst)
HANDLE_WRITE_INST_(WRITE_FLOAT, MEMOIR_FUNC(write_f32), WriteInst)
HANDLE_WRITE_INST_(WRITE_PTR, MEMOIR_FUNC(write_ptr), WriteInst)
HANDLE_WRITE_INST_(WRITE_REF, MEMOIR_FUNC(write_ref), WriteInst)

/* Copy operations. */
HANDLE_INST_(COPY, MEMOIR_FUNC(copy), CopyInst)

/* Associative operations. */
HANDLE_ACCESS_INST_(HAS, MEMOIR_FUNC(has), HasInst)
HANDLE_INST_(KEYS, MEMOIR_FUNC(keys), KeysInst)

/* SSA/readonce operations. */
HANDLE_INST_(USE_PHI, MEMOIR_FUNC(usePHI), UsePHIInst)
HANDLE_INST_(RET_PHI, MEMOIR_FUNC(retPHI), RetPHIInst)

/* Type Assertion */
HANDLE_INST_(ASSERT_TYPE, MEMOIR_FUNC(assert_type), AssertTypeInst)

/* Function Signature */
HANDLE_INST_(SET_RETURN_TYPE, MEMOIR_FUNC(set_return_type), ReturnTypeInst)


/* Fold operation */
#ifndef HANDLE_FOLD_INST
#define HANDLE_FOLD_INST(ENUM, FUNC, CLASS) HANDLE_ACCESS_INST(ENUM, FUNC, CLASS)
#endif

#define HANDLE_FOLD_INST_(ENUM, FUNC, CLASS) HANDLE_FOLD_INST(ENUM, FUNC, CLASS)

HANDLE_FOLD_INST_(FOLD_UINT64, MEMOIR_FUNC(fold_u64), FoldInst)
HANDLE_FOLD_INST_(FOLD_UINT32, MEMOIR_FUNC(fold_u32), FoldInst)
HANDLE_FOLD_INST_(FOLD_UINT16, MEMOIR_FUNC(fold_u16), FoldInst)
HANDLE_FOLD_INST_(FOLD_UINT8, MEMOIR_FUNC(fold_u8), FoldInst)
HANDLE_FOLD_INST_(FOLD_UINT2, MEMOIR_FUNC(fold_u2), FoldInst)
HANDLE_FOLD_INST_(FOLD_INT64, MEMOIR_FUNC(fold_i64), FoldInst)
HANDLE_FOLD_INST_(FOLD_INT32, MEMOIR_FUNC(fold_i32), FoldInst)
HANDLE_FOLD_INST_(FOLD_INT16, MEMOIR_FUNC(fold_i16), FoldInst)
HANDLE_FOLD_INST_(FOLD_INT8, MEMOIR_FUNC(fold_i8), FoldInst)
HANDLE_FOLD_INST_(FOLD_INT2, MEMOIR_FUNC(fold_i2), FoldInst)
HANDLE_FOLD_INST_(FOLD_BOOL, MEMOIR_FUNC(fold_boolean), FoldInst)
HANDLE_FOLD_INST_(FOLD_DOUBLE, MEMOIR_FUNC(fold_f64), FoldInst)
HANDLE_FOLD_INST_(FOLD_FLOAT, MEMOIR_FUNC(fold_f32), FoldInst)
HANDLE_FOLD_INST_(FOLD_PTR, MEMOIR_FUNC(fold_ptr), FoldInst)
HANDLE_FOLD_INST_(FOLD_REF, MEMOIR_FUNC(fold_ref), FoldInst)



// ================================

#undef HANDLE_INST
#undef HANDLE_TYPE_INST
#undef HANDLE_PRIMITIVE_TYPE_INST
#undef HANDLE_ALLOC_INST
#undef HANDLE_ACCESS_INST
#undef HANDLE_READ_INST
#undef HANDLE_UPDATE_INST
#undef HANDLE_WRITE_INST
#undef HANDLE_INSERT_INST
#undef HANDLE_REMOVE_INST
#undef HANDLE_GET_INST
#undef HANDLE_COPY_INST
#undef HANDLE_SWAP_INST
#undef HANDLE_FOLD_INST
// clang-format on