// clang-format off
#ifndef HANDLE_INST
#define HANDLE_INST(ENUM, FUNC, CLASS) /* NO HANDLING */
#endif
#define HANDLE_INST_(ENUM, FUNC, CLASS) HANDLE_INST(ENUM, FUNC, CLASS)

#ifndef HANDLE_TYPE_INST
#define HANDLE_TYPE_INST(ENUM, FUNC, CLASS) HANDLE_INST(ENUM, FUNC, CLASS)
#endif
#define HANDLE_TYPE_INST_(ENUM, FUNC, CLASS) HANDLE_TYPE_INST(ENUM, FUNC, CLASS)
HANDLE_TYPE_INST_(DEFINE_STRUCT_TYPE, MEMOIR_FUNC(define_struct_type), DefineStructTypeInst)
HANDLE_TYPE_INST_(STRUCT_TYPE, MEMOIR_FUNC(struct_type), StructTypeInst)
HANDLE_TYPE_INST_(TENSOR_TYPE, MEMOIR_FUNC(tensor_type), TensorTypeInst)
HANDLE_TYPE_INST_(STATIC_TENSOR_TYPE, MEMOIR_FUNC(static_tensor_type), StaticTensorTypeInst)
HANDLE_TYPE_INST_(ASSOC_ARRAY_TYPE, MEMOIR_FUNC(assoc_array_type), AssocArrayTypeInst)
HANDLE_TYPE_INST_(SEQUENCE_TYPE, MEMOIR_FUNC(sequence_type), SequenceTypeInst)
HANDLE_TYPE_INST_(REFERENCE_TYPE, MEMOIR_FUNC(ref_type), ReferenceTypeInst)

// Primitive type handling
#ifndef HANDLE_PRIMITIVE_TYPE_INST
#define HANDLE_PRIMITIVE_TYPE_INST(ENUM, FUNC, CLASS) HANDLE_TYPE_INST(ENUM, FUNC, CLASS)
#endif
#define HANDLE_PRIMITIVE_TYPE_INST_(ENUM, FUNC, CLASS) HANDLE_PRIMITIVE_TYPE_INST(ENUM, FUNC, CLASS)
HANDLE_PRIMITIVE_TYPE_INST_(UINT64_TYPE, MEMOIR_FUNC(u64_type), UInt64TypeInst)
HANDLE_PRIMITIVE_TYPE_INST_(UINT32_TYPE, MEMOIR_FUNC(u32_type), UInt32TypeInst)
HANDLE_PRIMITIVE_TYPE_INST_(UINT16_TYPE, MEMOIR_FUNC(u16_type), UInt16TypeInst)
HANDLE_PRIMITIVE_TYPE_INST_(UINT8_TYPE, MEMOIR_FUNC(u8_type), UInt8TypeInst)
HANDLE_PRIMITIVE_TYPE_INST_(UINT2_TYPE, MEMOIR_FUNC(u2_type), UInt2TypeInst)
HANDLE_PRIMITIVE_TYPE_INST_(INT64_TYPE, MEMOIR_FUNC(i64_type), Int64TypeInst)
HANDLE_PRIMITIVE_TYPE_INST_(INT32_TYPE, MEMOIR_FUNC(i32_type), Int32TypeInst)
HANDLE_PRIMITIVE_TYPE_INST_(INT16_TYPE, MEMOIR_FUNC(i16_type), Int16TypeInst)
HANDLE_PRIMITIVE_TYPE_INST_(INT8_TYPE, MEMOIR_FUNC(i8_type), Int8TypeInst)
HANDLE_PRIMITIVE_TYPE_INST_(INT2_TYPE, MEMOIR_FUNC(i2_type), Int2TypeInst)
HANDLE_PRIMITIVE_TYPE_INST_(BOOL_TYPE, MEMOIR_FUNC(boolean_type), BoolTypeInst)
HANDLE_PRIMITIVE_TYPE_INST_(FLOAT_TYPE, MEMOIR_FUNC(f32_type), FloatTypeInst)
HANDLE_PRIMITIVE_TYPE_INST_(DOUBLE_TYPE, MEMOIR_FUNC(f64_type), DoubleTypeInst)
HANDLE_PRIMITIVE_TYPE_INST_(POINTER_TYPE, MEMOIR_FUNC(ptr_type), PointerTypeInst)
HANDLE_PRIMITIVE_TYPE_INST_(VOID_TYPE, MEMOIR_FUNC(void_type), VoidTypeInst)

#ifndef HANDLE_ALLOC_INST
#define HANDLE_ALLOC_INST(ENUM, FUNC, CLASS) HANDLE_INST(ENUM, FUNC, CLASS)
#endif
#define HANDLE_ALLOC_INST_(ENUM, FUNC, CLASS) HANDLE_ALLOC_INST(ENUM, FUNC, CLASS)
HANDLE_ALLOC_INST_(ALLOCATE_STRUCT, MEMOIR_FUNC(allocate_struct), StructAllocInst)

#ifndef HANDLE_COLLECTION_ALLOC_INST
#define HANDLE_COLLECTION_ALLOC_INST(ENUM, FUNC, CLASS) HANDLE_ALLOC_INST(ENUM, FUNC, CLASS)
#endif
#define HANDLE_COLLECTION_ALLOC_INST_(ENUM, FUNC, CLASS) HANDLE_COLLECTION_ALLOC_INST(ENUM, FUNC, CLASS)
HANDLE_COLLECTION_ALLOC_INST_(ALLOCATE_TENSOR, MEMOIR_FUNC(allocate_tensor), TensorAllocInst)
HANDLE_COLLECTION_ALLOC_INST_(ALLOCATE_ASSOC_ARRAY, MEMOIR_FUNC(allocate_assoc_array), AssocArrayAllocInst)
HANDLE_COLLECTION_ALLOC_INST_(ALLOCATE_SEQUENCE, MEMOIR_FUNC(allocate_sequence), SequenceAllocInst)


#ifndef HANDLE_ACCESS_INST
#define HANDLE_ACCESS_INST(ENUM, FUNC, CLASS) HANDLE_INST(ENUM, FUNC, CLASS)
#endif
#define HANDLE_ACCESS_INST_(ENUM, FUNC, CLASS) HANDLE_ACCESS_INST(ENUM, FUNC, CLASS)

#ifndef HANDLE_READ_INST
#define HANDLE_READ_INST(ENUM, FUNC, CLASS) HANDLE_ACCESS_INST(ENUM, FUNC, CLASS)
#endif
#define HANDLE_READ_INST_(ENUM, FUNC, CLASS) HANDLE_READ_INST(ENUM, FUNC, CLASS)

#ifndef HANDLE_STRUCT_READ_INST
#define HANDLE_STRUCT_READ_INST(ENUM, FUNC, CLASS) HANDLE_READ_INST(ENUM, FUNC, CLASS)
#endif
#define HANDLE_STRUCT_READ_INST_(ENUM, FUNC, CLASS) HANDLE_STRUCT_READ_INST(ENUM, FUNC, CLASS)
HANDLE_STRUCT_READ_INST_(STRUCT_READ_UINT64, MEMOIR_FUNC(struct_read_u64), StructReadInst)
HANDLE_STRUCT_READ_INST_(STRUCT_READ_UINT32, MEMOIR_FUNC(struct_read_u32), StructReadInst)
HANDLE_STRUCT_READ_INST_(STRUCT_READ_UINT16, MEMOIR_FUNC(struct_read_u16), StructReadInst)
HANDLE_STRUCT_READ_INST_(STRUCT_READ_UINT8, MEMOIR_FUNC(struct_read_u8), StructReadInst)
HANDLE_STRUCT_READ_INST_(STRUCT_READ_UINT2, MEMOIR_FUNC(struct_read_u2), StructReadInst)
HANDLE_STRUCT_READ_INST_(STRUCT_READ_INT64, MEMOIR_FUNC(struct_read_i64), StructReadInst)
HANDLE_STRUCT_READ_INST_(STRUCT_READ_INT32, MEMOIR_FUNC(struct_read_i32), StructReadInst)
HANDLE_STRUCT_READ_INST_(STRUCT_READ_INT16, MEMOIR_FUNC(struct_read_i16), StructReadInst)
HANDLE_STRUCT_READ_INST_(STRUCT_READ_INT8, MEMOIR_FUNC(struct_read_i8), StructReadInst)
HANDLE_STRUCT_READ_INST_(STRUCT_READ_INT2, MEMOIR_FUNC(struct_read_i2), StructReadInst)
HANDLE_STRUCT_READ_INST_(STRUCT_READ_BOOL, MEMOIR_FUNC(struct_read_boolean), StructReadInst)
HANDLE_STRUCT_READ_INST_(STRUCT_READ_DOUBLE, MEMOIR_FUNC(struct_read_f64), StructReadInst)
HANDLE_STRUCT_READ_INST_(STRUCT_READ_FLOAT, MEMOIR_FUNC(struct_read_f32), StructReadInst)
HANDLE_STRUCT_READ_INST_(STRUCT_READ_PTR, MEMOIR_FUNC(struct_read_ptr), StructReadInst)
HANDLE_STRUCT_READ_INST_(STRUCT_READ_STRUCT_REF, MEMOIR_FUNC(struct_read_struct_ref), StructReadInst)
HANDLE_STRUCT_READ_INST_(STRUCT_READ_COLLECTION_REF, MEMOIR_FUNC(struct_read_collection_ref), StructReadInst)

#ifndef HANDLE_INDEX_READ_INST
#define HANDLE_INDEX_READ_INST(ENUM, FUNC, CLASS) HANDLE_READ_INST(ENUM, FUNC, CLASS)
#endif
#define HANDLE_INDEX_READ_INST_(ENUM, FUNC, CLASS) HANDLE_INDEX_READ_INST(ENUM, FUNC, CLASS)
HANDLE_INDEX_READ_INST_(INDEX_READ_UINT64, MEMOIR_FUNC(index_read_u64), IndexReadInst)
HANDLE_INDEX_READ_INST_(INDEX_READ_UINT32, MEMOIR_FUNC(index_read_u32), IndexReadInst)
HANDLE_INDEX_READ_INST_(INDEX_READ_UINT16, MEMOIR_FUNC(index_read_u16), IndexReadInst)
HANDLE_INDEX_READ_INST_(INDEX_READ_UINT8, MEMOIR_FUNC(index_read_u8), IndexReadInst)
HANDLE_INDEX_READ_INST_(INDEX_READ_UINT2, MEMOIR_FUNC(index_read_u2), IndexReadInst)
HANDLE_INDEX_READ_INST_(INDEX_READ_INT64, MEMOIR_FUNC(index_read_i64), IndexReadInst)
HANDLE_INDEX_READ_INST_(INDEX_READ_INT32, MEMOIR_FUNC(index_read_i32), IndexReadInst)
HANDLE_INDEX_READ_INST_(INDEX_READ_INT16, MEMOIR_FUNC(index_read_i16), IndexReadInst)
HANDLE_INDEX_READ_INST_(INDEX_READ_INT8, MEMOIR_FUNC(index_read_i8), IndexReadInst)
HANDLE_INDEX_READ_INST_(INDEX_READ_INT2, MEMOIR_FUNC(index_read_i2), IndexReadInst)
HANDLE_INDEX_READ_INST_(INDEX_READ_BOOL, MEMOIR_FUNC(index_read_boolean), IndexReadInst)
HANDLE_INDEX_READ_INST_(INDEX_READ_DOUBLE, MEMOIR_FUNC(index_read_f64), IndexReadInst)
HANDLE_INDEX_READ_INST_(INDEX_READ_FLOAT, MEMOIR_FUNC(index_read_f32), IndexReadInst)
HANDLE_INDEX_READ_INST_(INDEX_READ_PTR, MEMOIR_FUNC(index_read_ptr), IndexReadInst)
HANDLE_INDEX_READ_INST_(INDEX_READ_STRUCT_REF, MEMOIR_FUNC(index_read_struct_ref), IndexReadInst)
HANDLE_INDEX_READ_INST_(INDEX_READ_COLLECTION_REF, MEMOIR_FUNC(index_read_collection_ref), IndexReadInst)

#ifndef HANDLE_ASSOC_READ_INST
#define HANDLE_ASSOC_READ_INST(ENUM, FUNC, CLASS) HANDLE_READ_INST(ENUM, FUNC, CLASS)
#endif
#define HANDLE_ASSOC_READ_INST_(ENUM, FUNC, CLASS) HANDLE_ASSOC_READ_INST(ENUM, FUNC, CLASS)
HANDLE_ASSOC_READ_INST_(ASSOC_READ_UINT64, MEMOIR_FUNC(assoc_read_u64), AssocReadInst)
HANDLE_ASSOC_READ_INST_(ASSOC_READ_UINT32, MEMOIR_FUNC(assoc_read_u32), AssocReadInst)
HANDLE_ASSOC_READ_INST_(ASSOC_READ_UINT16, MEMOIR_FUNC(assoc_read_u16), AssocReadInst)
HANDLE_ASSOC_READ_INST_(ASSOC_READ_UINT8, MEMOIR_FUNC(assoc_read_u8), AssocReadInst)
HANDLE_ASSOC_READ_INST_(ASSOC_READ_UINT2, MEMOIR_FUNC(assoc_read_u2), AssocReadInst)
HANDLE_ASSOC_READ_INST_(ASSOC_READ_INT64, MEMOIR_FUNC(assoc_read_i64), AssocReadInst)
HANDLE_ASSOC_READ_INST_(ASSOC_READ_INT32, MEMOIR_FUNC(assoc_read_i32), AssocReadInst)
HANDLE_ASSOC_READ_INST_(ASSOC_READ_INT16, MEMOIR_FUNC(assoc_read_i16), AssocReadInst)
HANDLE_ASSOC_READ_INST_(ASSOC_READ_INT8, MEMOIR_FUNC(assoc_read_i8), AssocReadInst)
HANDLE_ASSOC_READ_INST_(ASSOC_READ_INT2, MEMOIR_FUNC(assoc_read_i2), AssocReadInst)
HANDLE_ASSOC_READ_INST_(ASSOC_READ_BOOL, MEMOIR_FUNC(assoc_read_boolean), AssocReadInst)
HANDLE_ASSOC_READ_INST_(ASSOC_READ_DOUBLE, MEMOIR_FUNC(assoc_read_f64), AssocReadInst)
HANDLE_ASSOC_READ_INST_(ASSOC_READ_FLOAT, MEMOIR_FUNC(assoc_read_f32), AssocReadInst)
HANDLE_ASSOC_READ_INST_(ASSOC_READ_PTR, MEMOIR_FUNC(assoc_read_ptr), AssocReadInst)
HANDLE_ASSOC_READ_INST_(ASSOC_READ_STRUCT_REF, MEMOIR_FUNC(assoc_read_struct_ref), AssocReadInst)
HANDLE_ASSOC_READ_INST_(ASSOC_READ_COLLECTION_REF, MEMOIR_FUNC(assoc_read_collection_ref), AssocReadInst)

#ifndef HANDLE_WRITE_INST
#define HANDLE_WRITE_INST(ENUM, FUNC, CLASS) HANDLE_ACCESS_INST(ENUM, FUNC, CLASS)
#endif
#define HANDLE_WRITE_INST_(ENUM, FUNC, CLASS) HANDLE_WRITE_INST(ENUM, FUNC, CLASS)

#ifndef HANDLE_STRUCT_WRITE_INST
#define HANDLE_STRUCT_WRITE_INST(ENUM, FUNC, CLASS) HANDLE_WRITE_INST(ENUM, FUNC, CLASS)
#endif
#define HANDLE_STRUCT_WRITE_INST_(ENUM, FUNC, CLASS) HANDLE_STRUCT_WRITE_INST(ENUM, FUNC, CLASS)
HANDLE_STRUCT_WRITE_INST_(STRUCT_WRITE_UINT64, MEMOIR_FUNC(struct_write_u64), StructWriteInst)
HANDLE_STRUCT_WRITE_INST_(STRUCT_WRITE_UINT32, MEMOIR_FUNC(struct_write_u32), StructWriteInst)
HANDLE_STRUCT_WRITE_INST_(STRUCT_WRITE_UINT16, MEMOIR_FUNC(struct_write_u16), StructWriteInst)
HANDLE_STRUCT_WRITE_INST_(STRUCT_WRITE_UINT8, MEMOIR_FUNC(struct_write_u8), StructWriteInst)
HANDLE_STRUCT_WRITE_INST_(STRUCT_WRITE_UINT2, MEMOIR_FUNC(struct_write_u2), StructWriteInst)
HANDLE_STRUCT_WRITE_INST_(STRUCT_WRITE_INT64, MEMOIR_FUNC(struct_write_i64), StructWriteInst)
HANDLE_STRUCT_WRITE_INST_(STRUCT_WRITE_INT32, MEMOIR_FUNC(struct_write_i32), StructWriteInst)
HANDLE_STRUCT_WRITE_INST_(STRUCT_WRITE_INT16, MEMOIR_FUNC(struct_write_i16), StructWriteInst)
HANDLE_STRUCT_WRITE_INST_(STRUCT_WRITE_INT8, MEMOIR_FUNC(struct_write_i8), StructWriteInst)
HANDLE_STRUCT_WRITE_INST_(STRUCT_WRITE_INT2, MEMOIR_FUNC(struct_write_i2), StructWriteInst)
HANDLE_STRUCT_WRITE_INST_(STRUCT_WRITE_BOOL, MEMOIR_FUNC(struct_write_boolean), StructWriteInst)
HANDLE_STRUCT_WRITE_INST_(STRUCT_WRITE_DOUBLE, MEMOIR_FUNC(struct_write_f64), StructWriteInst)
HANDLE_STRUCT_WRITE_INST_(STRUCT_WRITE_PTR, MEMOIR_FUNC(struct_write_ptr), StructWriteInst)
HANDLE_STRUCT_WRITE_INST_(STRUCT_WRITE_FLOAT, MEMOIR_FUNC(struct_write_f32), StructWriteInst)
HANDLE_STRUCT_WRITE_INST_(STRUCT_WRITE_STRUCT_REF, MEMOIR_FUNC(struct_write_struct_ref), StructWriteInst)
HANDLE_STRUCT_WRITE_INST_(STRUCT_WRITE_COLLECTION_REF, MEMOIR_FUNC(struct_write_collection_ref), StructWriteInst)

#ifndef HANDLE_INDEX_WRITE_INST
#define HANDLE_INDEX_WRITE_INST(ENUM, FUNC, CLASS) HANDLE_WRITE_INST(ENUM, FUNC, CLASS)
#endif
#define HANDLE_INDEX_WRITE_INST_(ENUM, FUNC, CLASS) HANDLE_INDEX_WRITE_INST(ENUM, FUNC, CLASS)
HANDLE_INDEX_WRITE_INST_(INDEX_WRITE_UINT64, MEMOIR_FUNC(index_write_u64), IndexWriteInst)
HANDLE_INDEX_WRITE_INST_(INDEX_WRITE_UINT32, MEMOIR_FUNC(index_write_u32), IndexWriteInst)
HANDLE_INDEX_WRITE_INST_(INDEX_WRITE_UINT16, MEMOIR_FUNC(index_write_u16), IndexWriteInst)
HANDLE_INDEX_WRITE_INST_(INDEX_WRITE_UINT8, MEMOIR_FUNC(index_write_u8), IndexWriteInst)
HANDLE_INDEX_WRITE_INST_(INDEX_WRITE_UINT2, MEMOIR_FUNC(index_write_u2), IndexWriteInst)
HANDLE_INDEX_WRITE_INST_(INDEX_WRITE_INT64, MEMOIR_FUNC(index_write_i64), IndexWriteInst)
HANDLE_INDEX_WRITE_INST_(INDEX_WRITE_INT32, MEMOIR_FUNC(index_write_i32), IndexWriteInst)
HANDLE_INDEX_WRITE_INST_(INDEX_WRITE_INT16, MEMOIR_FUNC(index_write_i16), IndexWriteInst)
HANDLE_INDEX_WRITE_INST_(INDEX_WRITE_INT8, MEMOIR_FUNC(index_write_i8), IndexWriteInst)
HANDLE_INDEX_WRITE_INST_(INDEX_WRITE_INT2, MEMOIR_FUNC(index_write_i2), IndexWriteInst)
HANDLE_INDEX_WRITE_INST_(INDEX_WRITE_BOOL, MEMOIR_FUNC(index_write_boolean), IndexWriteInst)
HANDLE_INDEX_WRITE_INST_(INDEX_WRITE_DOUBLE, MEMOIR_FUNC(index_write_f64), IndexWriteInst)
HANDLE_INDEX_WRITE_INST_(INDEX_WRITE_FLOAT, MEMOIR_FUNC(index_write_f32), IndexWriteInst)
HANDLE_INDEX_WRITE_INST_(INDEX_WRITE_PTR, MEMOIR_FUNC(index_write_ptr), IndexWriteInst)
HANDLE_INDEX_WRITE_INST_(INDEX_WRITE_STRUCT_REF, MEMOIR_FUNC(index_write_struct_ref), IndexWriteInst)
HANDLE_INDEX_WRITE_INST_(INDEX_WRITE_COLLECTION_REF, MEMOIR_FUNC(index_write_collection_ref), IndexWriteInst)

#ifndef HANDLE_ASSOC_WRITE_INST
#define HANDLE_ASSOC_WRITE_INST(ENUM, FUNC, CLASS) HANDLE_WRITE_INST(ENUM, FUNC, CLASS)
#endif
#define HANDLE_ASSOC_WRITE_INST_(ENUM, FUNC, CLASS) HANDLE_ASSOC_WRITE_INST(ENUM, FUNC, CLASS)
HANDLE_ASSOC_WRITE_INST_(ASSOC_WRITE_UINT64, MEMOIR_FUNC(assoc_write_u64), AssocWriteInst)
HANDLE_ASSOC_WRITE_INST_(ASSOC_WRITE_UINT32, MEMOIR_FUNC(assoc_write_u32), AssocWriteInst)
HANDLE_ASSOC_WRITE_INST_(ASSOC_WRITE_UINT16, MEMOIR_FUNC(assoc_write_u16), AssocWriteInst)
HANDLE_ASSOC_WRITE_INST_(ASSOC_WRITE_UINT8, MEMOIR_FUNC(assoc_write_u8), AssocWriteInst)
HANDLE_ASSOC_WRITE_INST_(ASSOC_WRITE_UINT2, MEMOIR_FUNC(assoc_write_u2), AssocWriteInst)
HANDLE_ASSOC_WRITE_INST_(ASSOC_WRITE_INT64, MEMOIR_FUNC(assoc_write_i64), AssocWriteInst)
HANDLE_ASSOC_WRITE_INST_(ASSOC_WRITE_INT32, MEMOIR_FUNC(assoc_write_i32), AssocWriteInst)
HANDLE_ASSOC_WRITE_INST_(ASSOC_WRITE_INT16, MEMOIR_FUNC(assoc_write_i16), AssocWriteInst)
HANDLE_ASSOC_WRITE_INST_(ASSOC_WRITE_INT8, MEMOIR_FUNC(assoc_write_i8), AssocWriteInst)
HANDLE_ASSOC_WRITE_INST_(ASSOC_WRITE_INT2, MEMOIR_FUNC(assoc_write_i2), AssocWriteInst)
HANDLE_ASSOC_WRITE_INST_(ASSOC_WRITE_BOOL, MEMOIR_FUNC(assoc_write_boolean), AssocWriteInst)
HANDLE_ASSOC_WRITE_INST_(ASSOC_WRITE_DOUBLE, MEMOIR_FUNC(assoc_write_f64), AssocWriteInst)
HANDLE_ASSOC_WRITE_INST_(ASSOC_WRITE_FLOAT, MEMOIR_FUNC(assoc_write_f32), AssocWriteInst)
HANDLE_ASSOC_WRITE_INST_(ASSOC_WRITE_PTR, MEMOIR_FUNC(assoc_write_ptr), AssocWriteInst)
HANDLE_ASSOC_WRITE_INST_(ASSOC_WRITE_STRUCT_REF, MEMOIR_FUNC(assoc_write_struct_ref), AssocWriteInst)
HANDLE_ASSOC_WRITE_INST_(ASSOC_WRITE_COLLECTION_REF, MEMOIR_FUNC(assoc_write_collection_ref), AssocWriteInst)


#ifndef HANDLE_GET_INST
#define HANDLE_GET_INST(ENUM, FUNC, CLASS) HANDLE_ACCESS_INST(ENUM, FUNC, CLASS)
#endif
#define HANDLE_GET_INST_(ENUM, FUNC, CLASS) HANDLE_GET_INST(ENUM, FUNC, CLASS)

#ifndef HANDLE_STRUCT_GET_INST
#define HANDLE_STRUCT_GET_INST(ENUM, FUNC, CLASS) HANDLE_GET_INST(ENUM, FUNC, CLASS)
#endif
#define HANDLE_STRUCT_GET_INST_(ENUM, FUNC, CLASS) HANDLE_STRUCT_GET_INST(ENUM, FUNC, CLASS)
HANDLE_STRUCT_GET_INST_(STRUCT_GET_STRUCT, MEMOIR_FUNC(struct_get_struct), StructGetInst)
HANDLE_STRUCT_GET_INST_(STRUCT_GET_COLLECTION, MEMOIR_FUNC(struct_get_collection), StructGetInst)

#ifndef HANDLE_INDEX_GET_INST
#define HANDLE_INDEX_GET_INST(ENUM, FUNC, CLASS) HANDLE_GET_INST(ENUM, FUNC, CLASS)
#endif
#define HANDLE_INDEX_GET_INST_(ENUM, FUNC, CLASS) HANDLE_INDEX_GET_INST(ENUM, FUNC, CLASS)
HANDLE_INDEX_GET_INST_(INDEX_GET_STRUCT, MEMOIR_FUNC(index_get_struct), IndexGetInst)
HANDLE_INDEX_GET_INST_(INDEX_GET_COLLECTION, MEMOIR_FUNC(index_get_collection), IndexGetInst)

#ifndef HANDLE_ASSOC_GET_INST
#define HANDLE_ASSOC_GET_INST(ENUM, FUNC, CLASS) HANDLE_GET_INST(ENUM, FUNC, CLASS)
#endif
#define HANDLE_ASSOC_GET_INST_(ENUM, FUNC, CLASS) HANDLE_ASSOC_GET_INST(ENUM, FUNC, CLASS)
HANDLE_ASSOC_GET_INST_(ASSOC_GET_STRUCT, MEMOIR_FUNC(assoc_get_struct), AssocGetInst)
HANDLE_ASSOC_GET_INST_(ASSOC_GET_COLLECTION, MEMOIR_FUNC(assoc_get_collection), AssocGetInst)

/* Struct and collection operations */
HANDLE_INST_(DELETE_STRUCT, MEMOIR_FUNC(delete_struct), DeleteStructInst)
HANDLE_INST_(DELETE_COLLECTION, MEMOIR_FUNC(delete_collection), DeleteCollectionInst)

/* Insert operations */
#ifndef HANDLE_INSERT_INST
#define HANDLE_INSERT_INST(ENUM, FUNC, CLASS) HANDLE_INST(ENUM, FUNC, CLASS)
#endif
#define HANDLE_INSERT_INST_(ENUM, FUNC, CLASS) HANDLE_INSERT_INST(ENUM, FUNC, CLASS)

/* Sequence insert range operation. */
HANDLE_INSERT_INST_(SEQ_INSERT, MEMOIR_FUNC(sequence_insert), SeqInsertSeqInst)

/* Assoc insert operation. */
HANDLE_INSERT_INST_(ASSOC_INSERT, MEMOIR_FUNC(assoc_insert), AssocInsertInst)

/* Sequence insert element operations */
#ifndef HANDLE_SEQ_INSERT_INST
#define HANDLE_SEQ_INSERT_INST(ENUM, FUNC, CLASS) HANDLE_INSERT_INST_(ENUM, FUNC, CLASS)
#endif
#define HANDLE_SEQ_INSERT_INST_(ENUM, FUNC, CLASS) HANDLE_SEQ_INSERT_INST(ENUM, FUNC, CLASS)
HANDLE_SEQ_INSERT_INST_(SEQ_INSERT_UINT64, MEMOIR_FUNC(sequence_insert_u64), SeqInsertInst)
HANDLE_SEQ_INSERT_INST_(SEQ_INSERT_UINT32, MEMOIR_FUNC(sequence_insert_u32), SeqInsertInst)
HANDLE_SEQ_INSERT_INST_(SEQ_INSERT_UINT16, MEMOIR_FUNC(sequence_insert_u16), SeqInsertInst)
HANDLE_SEQ_INSERT_INST_(SEQ_INSERT_UINT8, MEMOIR_FUNC(sequence_insert_u8), SeqInsertInst)
HANDLE_SEQ_INSERT_INST_(SEQ_INSERT_UINT2, MEMOIR_FUNC(sequence_insert_u2), SeqInsertInst)
HANDLE_SEQ_INSERT_INST_(SEQ_INSERT_INT64, MEMOIR_FUNC(sequence_insert_i64), SeqInsertInst)
HANDLE_SEQ_INSERT_INST_(SEQ_INSERT_INT32, MEMOIR_FUNC(sequence_insert_i32), SeqInsertInst)
HANDLE_SEQ_INSERT_INST_(SEQ_INSERT_INT16, MEMOIR_FUNC(sequence_insert_i16), SeqInsertInst)
HANDLE_SEQ_INSERT_INST_(SEQ_INSERT_INT8, MEMOIR_FUNC(sequence_insert_i8), SeqInsertInst)
HANDLE_SEQ_INSERT_INST_(SEQ_INSERT_INT2, MEMOIR_FUNC(sequence_insert_i2), SeqInsertInst)
HANDLE_SEQ_INSERT_INST_(SEQ_INSERT_BOOL, MEMOIR_FUNC(sequence_insert_boolean), SeqInsertInst)
HANDLE_SEQ_INSERT_INST_(SEQ_INSERT_DOUBLE, MEMOIR_FUNC(sequence_insert_f64), SeqInsertInst)
HANDLE_SEQ_INSERT_INST_(SEQ_INSERT_FLOAT, MEMOIR_FUNC(sequence_insert_f32), SeqInsertInst)
HANDLE_SEQ_INSERT_INST_(SEQ_INSERT_PTR, MEMOIR_FUNC(sequence_insert_ptr), SeqInsertInst)
HANDLE_SEQ_INSERT_INST_(SEQ_INSERT_STRUCT_REF, MEMOIR_FUNC(sequence_insert_struct_ref), SeqInsertInst)
HANDLE_SEQ_INSERT_INST_(SEQ_INSERT_COLLECTION_REF, MEMOIR_FUNC(sequence_insert_collection_ref), SeqInsertInst)

/* Remove operations. */
#ifndef HANDLE_REMOVE_INST
#define HANDLE_REMOVE_INST(ENUM, FUNC, CLASS) HANDLE_INST(ENUM, FUNC, CLASS)
#endif
#define HANDLE_REMOVE_INST_(ENUM, FUNC, CLASS) HANDLE_REMOVE_INST(ENUM, FUNC, CLASS)

HANDLE_REMOVE_INST_(SEQ_REMOVE, MEMOIR_FUNC(sequence_remove), SeqRemoveInst)
HANDLE_REMOVE_INST_(ASSOC_REMOVE, MEMOIR_FUNC(assoc_remove), AssocRemoveInst)

/* Copy operations. */
#ifndef HANDLE_COPY_INST
#define HANDLE_COPY_INST(ENUM, FUNC, CLASS) HANDLE_INST(ENUM, FUNC, CLASS)
#endif
#define HANDLE_COPY_INST_(ENUM, FUNC, CLASS) HANDLE_COPY_INST(ENUM, FUNC, CLASS)

HANDLE_COPY_INST_(SEQ_COPY, MEMOIR_FUNC(sequence_copy), SeqCopyInst)

/* Swap operations. */
#ifndef HANDLE_SWAP_INST
#define HANDLE_SWAP_INST(ENUM, FUNC, CLASS) HANDLE_INST(ENUM, FUNC, CLASS)
#endif
#define HANDLE_SWAP_INST_(ENUM, FUNC, CLASS) HANDLE_SWAP_INST(ENUM, FUNC, CLASS)
HANDLE_SWAP_INST_(SEQ_SWAP, MEMOIR_FUNC(sequence_swap), SeqSwapInst)
HANDLE_SWAP_INST_(SEQ_SWAP_WITHIN, MEMOIR_FUNC(sequence_swap_within), SeqSwapWithinInst)

/* Associative operations. */
HANDLE_ACCESS_INST_(ASSOC_HAS, MEMOIR_FUNC(assoc_has), AssocHasInst)
HANDLE_INST_(ASSOC_KEYS, MEMOIR_FUNC(assoc_keys), AssocKeysInst)

/* SSA/readonce operations. */
HANDLE_INST_(USE_PHI, MEMOIR_FUNC(usePHI), UsePHIInst)
HANDLE_INST_(DEF_PHI, MEMOIR_FUNC(defPHI), DefPHIInst)
HANDLE_INST_(ARG_PHI, MEMOIR_FUNC(argPHI), ArgPHIInst)
HANDLE_INST_(RET_PHI, MEMOIR_FUNC(retPHI), RetPHIInst)

/* Type Assertion */
#ifndef HANDLE_ASSERT_TYPE_INST
#define HANDLE_ASSERT_TYPE_INST(ENUM, FUNC, CLASS) HANDLE_INST(ENUM, FUNC, CLASS)
#endif
#define HANDLE_ASSERT_TYPE_INST_(ENUM, FUNC, CLASS) HANDLE_ASSERT_TYPE_INST(ENUM, FUNC, CLASS)
HANDLE_ASSERT_TYPE_INST_(ASSERT_STRUCT_TYPE, MEMOIR_FUNC(assert_struct_type), AssertStructTypeInst)
HANDLE_ASSERT_TYPE_INST_(ASSERT_COLLECTION_TYPE, MEMOIR_FUNC(assert_collection_type), AssertCollectionTypeInst)
#undef HANDLE_ASSERT_TYPE_INST

/* Function Signature */
HANDLE_INST_(SET_RETURN_TYPE, MEMOIR_FUNC(set_return_type), ReturnTypeInst)

HANDLE_INST_(SIZE, MEMOIR_FUNC(size), SizeInst)
HANDLE_INST_(END, MEMOIR_FUNC(end), EndInst)

HANDLE_INST_(PROPERTY, MEMOIR_FUNC(property), PropertyInst)



/* Fold operation */
#ifndef HANDLE_FOLD_INST
#define HANDLE_FOLD_INST(ENUM, FUNC, CLASS, REVERSE) HANDLE_INST(ENUM, FUNC, CLASS)
#endif
#define HANDLE_FOLD_INST_(ENUM, FUNC, CLASS, REVERSE) HANDLE_FOLD_INST(ENUM, FUNC, CLASS, REVERSE)

HANDLE_FOLD_INST_(FOLD_UINT64, MEMOIR_FUNC(fold_u64), FoldInst, false)
HANDLE_FOLD_INST_(FOLD_UINT32, MEMOIR_FUNC(fold_u32), FoldInst, false)
HANDLE_FOLD_INST_(FOLD_UINT16, MEMOIR_FUNC(fold_u16), FoldInst, false)
HANDLE_FOLD_INST_(FOLD_UINT8, MEMOIR_FUNC(fold_u8), FoldInst, false)
HANDLE_FOLD_INST_(FOLD_UINT2, MEMOIR_FUNC(fold_u2), FoldInst, false)
HANDLE_FOLD_INST_(FOLD_INT64, MEMOIR_FUNC(fold_i64), FoldInst, false)
HANDLE_FOLD_INST_(FOLD_INT32, MEMOIR_FUNC(fold_i32), FoldInst, false)
HANDLE_FOLD_INST_(FOLD_INT16, MEMOIR_FUNC(fold_i16), FoldInst, false)
HANDLE_FOLD_INST_(FOLD_INT8, MEMOIR_FUNC(fold_i8), FoldInst, false)
HANDLE_FOLD_INST_(FOLD_INT2, MEMOIR_FUNC(fold_i2), FoldInst, false)
HANDLE_FOLD_INST_(FOLD_BOOL, MEMOIR_FUNC(fold_boolean), FoldInst, false)
HANDLE_FOLD_INST_(FOLD_DOUBLE, MEMOIR_FUNC(fold_f64), FoldInst, false)
HANDLE_FOLD_INST_(FOLD_FLOAT, MEMOIR_FUNC(fold_f32), FoldInst, false)
HANDLE_FOLD_INST_(FOLD_PTR, MEMOIR_FUNC(fold_ptr), FoldInst, false)
HANDLE_FOLD_INST_(FOLD_STRUCT_REF, MEMOIR_FUNC(fold_struct_ref), FoldInst, false)
HANDLE_FOLD_INST_(FOLD_COLLECTION_REF, MEMOIR_FUNC(fold_collection_ref), FoldInst, false)

HANDLE_FOLD_INST_(RFOLD_UINT64, MEMOIR_FUNC(rfold_u64), FoldInst, true)
HANDLE_FOLD_INST_(RFOLD_UINT32, MEMOIR_FUNC(rfold_u32), FoldInst, true)
HANDLE_FOLD_INST_(RFOLD_UINT16, MEMOIR_FUNC(rfold_u16), FoldInst, true)
HANDLE_FOLD_INST_(RFOLD_UINT8, MEMOIR_FUNC(rfold_u8), FoldInst, true)
HANDLE_FOLD_INST_(RFOLD_UINT2, MEMOIR_FUNC(rfold_u2), FoldInst, true)
HANDLE_FOLD_INST_(RFOLD_INT64, MEMOIR_FUNC(rfold_i64), FoldInst, true)
HANDLE_FOLD_INST_(RFOLD_INT32, MEMOIR_FUNC(rfold_i32), FoldInst, true)
HANDLE_FOLD_INST_(RFOLD_INT16, MEMOIR_FUNC(rfold_i16), FoldInst, true)
HANDLE_FOLD_INST_(RFOLD_INT8, MEMOIR_FUNC(rfold_i8), FoldInst, true)
HANDLE_FOLD_INST_(RFOLD_INT2, MEMOIR_FUNC(rfold_i2), FoldInst, true)
HANDLE_FOLD_INST_(RFOLD_BOOL, MEMOIR_FUNC(rfold_boolean), FoldInst, true)
HANDLE_FOLD_INST_(RFOLD_DOUBLE, MEMOIR_FUNC(rfold_f64), FoldInst, true)
HANDLE_FOLD_INST_(RFOLD_FLOAT, MEMOIR_FUNC(rfold_f32), FoldInst, true)
HANDLE_FOLD_INST_(RFOLD_PTR, MEMOIR_FUNC(rfold_ptr), FoldInst, true)
HANDLE_FOLD_INST_(RFOLD_STRUCT_REF, MEMOIR_FUNC(rfold_struct_ref), FoldInst, true)
HANDLE_FOLD_INST_(RFOLD_COLLECTION_REF, MEMOIR_FUNC(rfold_collection_ref), FoldInst, true)



// ================================

#undef HANDLE_INST
#undef HANDLE_TYPE_INST
#undef HANDLE_PRIMITIVE_TYPE_INST
#undef HANDLE_ALLOC_INST
#undef HANDLE_COLLECTION_ALLOC_INST
#undef HANDLE_ACCESS_INST
#undef HANDLE_READ_INST
#undef HANDLE_STRUCT_READ_INST
#undef HANDLE_INDEX_READ_INST
#undef HANDLE_ASSOC_READ_INST
#undef HANDLE_WRITE_INST
#undef HANDLE_STRUCT_WRITE_INST
#undef HANDLE_INDEX_WRITE_INST
#undef HANDLE_ASSOC_WRITE_INST
#undef HANDLE_GET_INST
#undef HANDLE_STRUCT_GET_INST
#undef HANDLE_INDEX_GET_INST
#undef HANDLE_ASSOC_GET_INST
#undef HANDLE_INSERT_INST
#undef HANDLE_SEQ_INSERT_INST
#undef HANDLE_REMOVE_INST
#undef HANDLE_COPY_INST
#undef HANDLE_SWAP_INST
#undef HANDLE_FOLD_INST
// clang-format on